service: slido-for-dgu

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: ap-northeast-2
  stage: ${opt:stage, 'dev'}
  environment:
    STAGE: ${self:provider.stage}
    ROOMS_TABLE: ${self:service}-${self:provider.stage}-rooms
    QUESTIONS_TABLE: ${self:service}-${self:provider.stage}-questions
    CONNECTIONS_TABLE: ${self:service}-${self:provider.stage}-connections
  
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ROOMS_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.QUESTIONS_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}
        - Effect: Allow
          Action:
            - execute-api:ManageConnections
          Resource:
            - arn:aws:execute-api:*:*:**/@connections/*

functions:
  # HTTP API Functions
  httpApi:
    handler: src/index.httpHandler
    events:
      - httpApi:
          path: /{proxy+}
          method: ANY
      - httpApi:
          path: /
          method: ANY

  # WebSocket API Functions
  websocketApi:
    handler: src/index.websocketHandler
    events:
      - websocket:
          route: $connect
      - websocket:
          route: $disconnect
      - websocket:
          route: $default

resources:
  Resources:
    # DynamoDB Tables
    RoomsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.ROOMS_TABLE}
        AttributeDefinitions:
          - AttributeName: roomId
            AttributeType: S
        KeySchema:
          - AttributeName: roomId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: false

    QuestionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.QUESTIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: questionId
            AttributeType: S
          - AttributeName: roomId
            AttributeType: S
        KeySchema:
          - AttributeName: questionId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: roomId-index
            KeySchema:
              - AttributeName: roomId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

plugins:
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 3000
    websocketPort: 3001